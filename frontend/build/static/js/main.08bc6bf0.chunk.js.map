{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","UserMedia","a","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","console","log","message","useEffect","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08bc6bf0.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"simple-peer\"\r\nimport io from \"socket.io-client\"\r\nimport \"./App.css\"\r\n\r\n\r\nconst socket = io.connect('http://localhost:5000')\r\nfunction App() {\r\n\tconst [ me, setMe ] = useState(\"\")\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst [ receivingCall, setReceivingCall ] = useState(false)\r\n\tconst [ caller, setCaller ] = useState(\"\")\r\n\tconst [ callerSignal, setCallerSignal ] = useState()\r\n\tconst [ callAccepted, setCallAccepted ] = useState(false)\r\n\tconst [ idToCall, setIdToCall ] = useState(\"\")\r\n\tconst [ callEnded, setCallEnded] = useState(false)\r\n\tconst [ name, setName ] = useState(\"\")\r\n\tconst myVideo = useRef()\r\n\tconst userVideo = useRef()\r\n\tconst connectionRef= useRef()\r\n\r\n\tconst UserMedia= async(stream)=>{\r\n  try {\r\n\t  /* use the stream */\r\n    stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n\tsetStream(stream)\r\n\tmyVideo.current.srcObject = stream;\r\n  } catch (err) {\r\n    /* handle the error */\r\n\treturn console.log(`${err.name}: ${err.message}`);\r\n  }\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t\t// \tsetStream(stream)\r\n\t\t// \t\tmyVideo.current.srcObject = stream\r\n\t\t// })\r\n\r\n\t\tUserMedia();\r\n\r\n\tsocket.on(\"me\", (id) => {\r\n\t\t\tsetMe(id)\r\n\t\t})\r\n\r\n\t\tsocket.on(\"callUser\", (data) => {\r\n\t\t\tsetReceivingCall(true)\r\n\t\t\tsetCaller(data.from)\r\n\t\t\tsetName(data.name)\r\n\t\t\tsetCallerSignal(data.signal)\r\n\t\t})\r\n\t}, [])\r\n\r\n\tconst callUser = (id) => {\r\n\t\tdebugger\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tdebugger\r\n\t\t\tsocket.emit(\"callUser\", {\r\n\t\t\t\tuserToCall: id,\r\n\t\t\t\tsignalData: data,\r\n\t\t\t\tfrom: me,\r\n\t\t\t\tname: name\r\n\t\t\t})\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t\t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t\t})\r\n\t\tsocket.on(\"callAccepted\", (signal) => {\r\n\t\t\tsetCallAccepted(true)\r\n\t\t\tpeer.signal(signal)\r\n\t\t})\r\n\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst answerCall =() =>  {\r\n\t\tdebugger\r\n\t\tsetCallAccepted(true)\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\tuserVideo.current.srcObject = stream\r\n\t\t})\r\n\r\n\t\tpeer.signal(callerSignal)\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst leaveCall = () => {\r\n\t\tsetCallEnded(true)\r\n\t\tconnectionRef.current.destroy()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Video Chat App</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}